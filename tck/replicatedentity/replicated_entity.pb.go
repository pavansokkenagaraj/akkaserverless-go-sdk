// Copyright 2021 Lightbend Inc.

//
// == Akka Serverless TCK model test for replicated entites ==
// see tck/src/main/scala/com/akkaserverless/tck/ReplicatedEntityTCK.scala

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: replicatedentity/replicated_entity.proto

package replicatedentity

import (
	_ "github.com/lightbend/akkaserverless-go-sdk/akkaserverless"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Type of clock for ReplicatedRegister updates.
//
type ReplicatedRegisterClockType int32

const (
	ReplicatedRegisterClockType_REPLICATED_REGISTER_CLOCK_TYPE_DEFAULT_UNSPECIFIED   ReplicatedRegisterClockType = 0
	ReplicatedRegisterClockType_REPLICATED_REGISTER_CLOCK_TYPE_REVERSE               ReplicatedRegisterClockType = 1
	ReplicatedRegisterClockType_REPLICATED_REGISTER_CLOCK_TYPE_CUSTOM                ReplicatedRegisterClockType = 2
	ReplicatedRegisterClockType_REPLICATED_REGISTER_CLOCK_TYPE_CUSTOM_AUTO_INCREMENT ReplicatedRegisterClockType = 3
)

// Enum value maps for ReplicatedRegisterClockType.
var (
	ReplicatedRegisterClockType_name = map[int32]string{
		0: "REPLICATED_REGISTER_CLOCK_TYPE_DEFAULT_UNSPECIFIED",
		1: "REPLICATED_REGISTER_CLOCK_TYPE_REVERSE",
		2: "REPLICATED_REGISTER_CLOCK_TYPE_CUSTOM",
		3: "REPLICATED_REGISTER_CLOCK_TYPE_CUSTOM_AUTO_INCREMENT",
	}
	ReplicatedRegisterClockType_value = map[string]int32{
		"REPLICATED_REGISTER_CLOCK_TYPE_DEFAULT_UNSPECIFIED":   0,
		"REPLICATED_REGISTER_CLOCK_TYPE_REVERSE":               1,
		"REPLICATED_REGISTER_CLOCK_TYPE_CUSTOM":                2,
		"REPLICATED_REGISTER_CLOCK_TYPE_CUSTOM_AUTO_INCREMENT": 3,
	}
)

func (x ReplicatedRegisterClockType) Enum() *ReplicatedRegisterClockType {
	p := new(ReplicatedRegisterClockType)
	*p = x
	return p
}

func (x ReplicatedRegisterClockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicatedRegisterClockType) Descriptor() protoreflect.EnumDescriptor {
	return file_replicatedentity_replicated_entity_proto_enumTypes[0].Descriptor()
}

func (ReplicatedRegisterClockType) Type() protoreflect.EnumType {
	return &file_replicatedentity_replicated_entity_proto_enumTypes[0]
}

func (x ReplicatedRegisterClockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplicatedRegisterClockType.Descriptor instead.
func (ReplicatedRegisterClockType) EnumDescriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{0}
}

//
// A `Request` message contains any actions that the entity should process.
// Actions must be processed in order. Any actions after a `Fail` may be ignored.
//
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Actions []*RequestAction `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Request) GetActions() []*RequestAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

//
// Each `RequestAction` is one of:
//
// - Update: update the Replicated Entity and return the updated state in the `Response`.
// - Forward: forward to another service, in place of replying with a `Response`.
// - Fail: fail the current `Process` command by sending a failure.
// - Effect: add a side effect to the current reply, forward, or failure.
// - Delete: request for the Replicated Entity to be deleted.
//
type RequestAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*RequestAction_Update
	//	*RequestAction_Delete
	//	*RequestAction_Forward
	//	*RequestAction_Fail
	//	*RequestAction_Effect
	Action isRequestAction_Action `protobuf_oneof:"action"`
}

func (x *RequestAction) Reset() {
	*x = RequestAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestAction) ProtoMessage() {}

func (x *RequestAction) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestAction.ProtoReflect.Descriptor instead.
func (*RequestAction) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{1}
}

func (m *RequestAction) GetAction() isRequestAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *RequestAction) GetUpdate() *Update {
	if x, ok := x.GetAction().(*RequestAction_Update); ok {
		return x.Update
	}
	return nil
}

func (x *RequestAction) GetDelete() *Delete {
	if x, ok := x.GetAction().(*RequestAction_Delete); ok {
		return x.Delete
	}
	return nil
}

func (x *RequestAction) GetForward() *Forward {
	if x, ok := x.GetAction().(*RequestAction_Forward); ok {
		return x.Forward
	}
	return nil
}

func (x *RequestAction) GetFail() *Fail {
	if x, ok := x.GetAction().(*RequestAction_Fail); ok {
		return x.Fail
	}
	return nil
}

func (x *RequestAction) GetEffect() *Effect {
	if x, ok := x.GetAction().(*RequestAction_Effect); ok {
		return x.Effect
	}
	return nil
}

type isRequestAction_Action interface {
	isRequestAction_Action()
}

type RequestAction_Update struct {
	Update *Update `protobuf:"bytes,1,opt,name=update,proto3,oneof"`
}

type RequestAction_Delete struct {
	Delete *Delete `protobuf:"bytes,2,opt,name=delete,proto3,oneof"`
}

type RequestAction_Forward struct {
	Forward *Forward `protobuf:"bytes,3,opt,name=forward,proto3,oneof"`
}

type RequestAction_Fail struct {
	Fail *Fail `protobuf:"bytes,4,opt,name=fail,proto3,oneof"`
}

type RequestAction_Effect struct {
	Effect *Effect `protobuf:"bytes,5,opt,name=effect,proto3,oneof"`
}

func (*RequestAction_Update) isRequestAction_Action() {}

func (*RequestAction_Delete) isRequestAction_Action() {}

func (*RequestAction_Forward) isRequestAction_Action() {}

func (*RequestAction_Fail) isRequestAction_Action() {}

func (*RequestAction_Effect) isRequestAction_Action() {}

//
// Update the Replicated Entity, with specific update values for particular Replicated Data types.
//
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//	*Update_Counter
	//	*Update_ReplicatedSet
	//	*Update_Register
	//	*Update_ReplicatedMap
	//	*Update_Vote
	Update isUpdate_Update `protobuf_oneof:"update"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{2}
}

func (m *Update) GetUpdate() isUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *Update) GetCounter() *ReplicatedCounterUpdate {
	if x, ok := x.GetUpdate().(*Update_Counter); ok {
		return x.Counter
	}
	return nil
}

func (x *Update) GetReplicatedSet() *ReplicatedSetUpdate {
	if x, ok := x.GetUpdate().(*Update_ReplicatedSet); ok {
		return x.ReplicatedSet
	}
	return nil
}

func (x *Update) GetRegister() *ReplicatedRegisterUpdate {
	if x, ok := x.GetUpdate().(*Update_Register); ok {
		return x.Register
	}
	return nil
}

func (x *Update) GetReplicatedMap() *ReplicatedMapUpdate {
	if x, ok := x.GetUpdate().(*Update_ReplicatedMap); ok {
		return x.ReplicatedMap
	}
	return nil
}

func (x *Update) GetVote() *VoteUpdate {
	if x, ok := x.GetUpdate().(*Update_Vote); ok {
		return x.Vote
	}
	return nil
}

type isUpdate_Update interface {
	isUpdate_Update()
}

type Update_Counter struct {
	// GCounterUpdate was field 1
	Counter *ReplicatedCounterUpdate `protobuf:"bytes,2,opt,name=counter,proto3,oneof"`
}

type Update_ReplicatedSet struct {
	// GSetUpdate was field 3
	ReplicatedSet *ReplicatedSetUpdate `protobuf:"bytes,4,opt,name=replicated_set,json=replicatedSet,proto3,oneof"`
}

type Update_Register struct {
	Register *ReplicatedRegisterUpdate `protobuf:"bytes,5,opt,name=register,proto3,oneof"`
}

type Update_ReplicatedMap struct {
	// FlagUpdate was field 6
	ReplicatedMap *ReplicatedMapUpdate `protobuf:"bytes,7,opt,name=replicated_map,json=replicatedMap,proto3,oneof"`
}

type Update_Vote struct {
	Vote *VoteUpdate `protobuf:"bytes,8,opt,name=vote,proto3,oneof"`
}

func (*Update_Counter) isUpdate_Update() {}

func (*Update_ReplicatedSet) isUpdate_Update() {}

func (*Update_Register) isUpdate_Update() {}

func (*Update_ReplicatedMap) isUpdate_Update() {}

func (*Update_Vote) isUpdate_Update() {}

//
// Update a ReplicatedCounter Replicated Data with a change.
//
type ReplicatedCounterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Change int64 `protobuf:"zigzag64,1,opt,name=change,proto3" json:"change,omitempty"`
}

func (x *ReplicatedCounterUpdate) Reset() {
	*x = ReplicatedCounterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedCounterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedCounterUpdate) ProtoMessage() {}

func (x *ReplicatedCounterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedCounterUpdate.ProtoReflect.Descriptor instead.
func (*ReplicatedCounterUpdate) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{3}
}

func (x *ReplicatedCounterUpdate) GetChange() int64 {
	if x != nil {
		return x.Change
	}
	return 0
}

//
// Update an ReplicatedSet Replicated Data by adding or removing elements, or clearing the set.
//
type ReplicatedSetUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*ReplicatedSetUpdate_Add
	//	*ReplicatedSetUpdate_Remove
	//	*ReplicatedSetUpdate_Clear
	Action isReplicatedSetUpdate_Action `protobuf_oneof:"action"`
}

func (x *ReplicatedSetUpdate) Reset() {
	*x = ReplicatedSetUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedSetUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedSetUpdate) ProtoMessage() {}

func (x *ReplicatedSetUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedSetUpdate.ProtoReflect.Descriptor instead.
func (*ReplicatedSetUpdate) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{4}
}

func (m *ReplicatedSetUpdate) GetAction() isReplicatedSetUpdate_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ReplicatedSetUpdate) GetAdd() string {
	if x, ok := x.GetAction().(*ReplicatedSetUpdate_Add); ok {
		return x.Add
	}
	return ""
}

func (x *ReplicatedSetUpdate) GetRemove() string {
	if x, ok := x.GetAction().(*ReplicatedSetUpdate_Remove); ok {
		return x.Remove
	}
	return ""
}

func (x *ReplicatedSetUpdate) GetClear() bool {
	if x, ok := x.GetAction().(*ReplicatedSetUpdate_Clear); ok {
		return x.Clear
	}
	return false
}

type isReplicatedSetUpdate_Action interface {
	isReplicatedSetUpdate_Action()
}

type ReplicatedSetUpdate_Add struct {
	Add string `protobuf:"bytes,1,opt,name=add,proto3,oneof"`
}

type ReplicatedSetUpdate_Remove struct {
	Remove string `protobuf:"bytes,2,opt,name=remove,proto3,oneof"`
}

type ReplicatedSetUpdate_Clear struct {
	Clear bool `protobuf:"varint,3,opt,name=clear,proto3,oneof"`
}

func (*ReplicatedSetUpdate_Add) isReplicatedSetUpdate_Action() {}

func (*ReplicatedSetUpdate_Remove) isReplicatedSetUpdate_Action() {}

func (*ReplicatedSetUpdate_Clear) isReplicatedSetUpdate_Action() {}

//
// Update an ReplicatedRegister Replicated Data with a new value.
//
type ReplicatedRegisterUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string                   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Clock *ReplicatedRegisterClock `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (x *ReplicatedRegisterUpdate) Reset() {
	*x = ReplicatedRegisterUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedRegisterUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedRegisterUpdate) ProtoMessage() {}

func (x *ReplicatedRegisterUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedRegisterUpdate.ProtoReflect.Descriptor instead.
func (*ReplicatedRegisterUpdate) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{5}
}

func (x *ReplicatedRegisterUpdate) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ReplicatedRegisterUpdate) GetClock() *ReplicatedRegisterClock {
	if x != nil {
		return x.Clock
	}
	return nil
}

//
// Clock for ReplicatedRegister updates.
//
type ReplicatedRegisterClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClockType        ReplicatedRegisterClockType `protobuf:"varint,1,opt,name=clock_type,json=clockType,proto3,enum=akkaserverless.tck.model.replicatedentity.ReplicatedRegisterClockType" json:"clock_type,omitempty"`
	CustomClockValue int64                       `protobuf:"varint,2,opt,name=custom_clock_value,json=customClockValue,proto3" json:"custom_clock_value,omitempty"`
}

func (x *ReplicatedRegisterClock) Reset() {
	*x = ReplicatedRegisterClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedRegisterClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedRegisterClock) ProtoMessage() {}

func (x *ReplicatedRegisterClock) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedRegisterClock.ProtoReflect.Descriptor instead.
func (*ReplicatedRegisterClock) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{6}
}

func (x *ReplicatedRegisterClock) GetClockType() ReplicatedRegisterClockType {
	if x != nil {
		return x.ClockType
	}
	return ReplicatedRegisterClockType_REPLICATED_REGISTER_CLOCK_TYPE_DEFAULT_UNSPECIFIED
}

func (x *ReplicatedRegisterClock) GetCustomClockValue() int64 {
	if x != nil {
		return x.CustomClockValue
	}
	return 0
}

//
// Update an ReplicatedMap Replicated Data by adding, updating, or removing entries, or clearing the map.
// Value types are determined by the prefix of the key.
//
type ReplicatedMapUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*ReplicatedMapUpdate_Add
	//	*ReplicatedMapUpdate_Update
	//	*ReplicatedMapUpdate_Remove
	//	*ReplicatedMapUpdate_Clear
	Action isReplicatedMapUpdate_Action `protobuf_oneof:"action"`
}

func (x *ReplicatedMapUpdate) Reset() {
	*x = ReplicatedMapUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedMapUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedMapUpdate) ProtoMessage() {}

func (x *ReplicatedMapUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedMapUpdate.ProtoReflect.Descriptor instead.
func (*ReplicatedMapUpdate) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{7}
}

func (m *ReplicatedMapUpdate) GetAction() isReplicatedMapUpdate_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ReplicatedMapUpdate) GetAdd() string {
	if x, ok := x.GetAction().(*ReplicatedMapUpdate_Add); ok {
		return x.Add
	}
	return ""
}

func (x *ReplicatedMapUpdate) GetUpdate() *ReplicatedMapEntryUpdate {
	if x, ok := x.GetAction().(*ReplicatedMapUpdate_Update); ok {
		return x.Update
	}
	return nil
}

func (x *ReplicatedMapUpdate) GetRemove() string {
	if x, ok := x.GetAction().(*ReplicatedMapUpdate_Remove); ok {
		return x.Remove
	}
	return ""
}

func (x *ReplicatedMapUpdate) GetClear() bool {
	if x, ok := x.GetAction().(*ReplicatedMapUpdate_Clear); ok {
		return x.Clear
	}
	return false
}

type isReplicatedMapUpdate_Action interface {
	isReplicatedMapUpdate_Action()
}

type ReplicatedMapUpdate_Add struct {
	Add string `protobuf:"bytes,1,opt,name=add,proto3,oneof"`
}

type ReplicatedMapUpdate_Update struct {
	Update *ReplicatedMapEntryUpdate `protobuf:"bytes,2,opt,name=update,proto3,oneof"`
}

type ReplicatedMapUpdate_Remove struct {
	Remove string `protobuf:"bytes,3,opt,name=remove,proto3,oneof"`
}

type ReplicatedMapUpdate_Clear struct {
	Clear bool `protobuf:"varint,4,opt,name=clear,proto3,oneof"`
}

func (*ReplicatedMapUpdate_Add) isReplicatedMapUpdate_Action() {}

func (*ReplicatedMapUpdate_Update) isReplicatedMapUpdate_Action() {}

func (*ReplicatedMapUpdate_Remove) isReplicatedMapUpdate_Action() {}

func (*ReplicatedMapUpdate_Clear) isReplicatedMapUpdate_Action() {}

//
// Update for an ReplicatedMap entry.
//
type ReplicatedMapEntryUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Update *Update `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *ReplicatedMapEntryUpdate) Reset() {
	*x = ReplicatedMapEntryUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedMapEntryUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedMapEntryUpdate) ProtoMessage() {}

func (x *ReplicatedMapEntryUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedMapEntryUpdate.ProtoReflect.Descriptor instead.
func (*ReplicatedMapEntryUpdate) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{8}
}

func (x *ReplicatedMapEntryUpdate) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReplicatedMapEntryUpdate) GetUpdate() *Update {
	if x != nil {
		return x.Update
	}
	return nil
}

//
// Update a Vote Replicated Data's self vote.
//
type VoteUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfVote bool `protobuf:"varint,1,opt,name=self_vote,json=selfVote,proto3" json:"self_vote,omitempty"`
}

func (x *VoteUpdate) Reset() {
	*x = VoteUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteUpdate) ProtoMessage() {}

func (x *VoteUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteUpdate.ProtoReflect.Descriptor instead.
func (*VoteUpdate) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{9}
}

func (x *VoteUpdate) GetSelfVote() bool {
	if x != nil {
		return x.SelfVote
	}
	return false
}

//
// Delete the Replicated Entity.
//
type Delete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Delete) Reset() {
	*x = Delete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delete) ProtoMessage() {}

func (x *Delete) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delete.ProtoReflect.Descriptor instead.
func (*Delete) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{10}
}

//
// Replace the response with a forward to `akkaserverless.tck.model.ReplicatedEntityTwo/Call`.
// The payload must be an `OtherRequest` message with the given `id`.
//
type Forward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Forward) Reset() {
	*x = Forward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forward) ProtoMessage() {}

func (x *Forward) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forward.ProtoReflect.Descriptor instead.
func (*Forward) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{11}
}

func (x *Forward) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//
// Fail the current command with the given description `message`.
//
type Fail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Fail) Reset() {
	*x = Fail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fail) ProtoMessage() {}

func (x *Fail) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fail.ProtoReflect.Descriptor instead.
func (*Fail) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{12}
}

func (x *Fail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//
// Add a side effect to the reply, to `akkaserverless.tck.model.ReplicatedEntityTwo/Call`.
// The payload must be an `OtherRequest` message with the given `id`.
// The side effect should be marked synchronous based on the given `synchronous` value.
//
type Effect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Synchronous bool   `protobuf:"varint,2,opt,name=synchronous,proto3" json:"synchronous,omitempty"`
}

func (x *Effect) Reset() {
	*x = Effect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Effect) ProtoMessage() {}

func (x *Effect) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Effect.ProtoReflect.Descriptor instead.
func (*Effect) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{13}
}

func (x *Effect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Effect) GetSynchronous() bool {
	if x != nil {
		return x.Synchronous
	}
	return false
}

//
// The `Response` message must contain the updated state of the Replicated Entity.
//
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *State `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{14}
}

func (x *Response) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

//
// Current state of a Replicated Entity, with specific values for particular Replicated Data types.
//
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*State_Counter
	//	*State_ReplicatedSet
	//	*State_Register
	//	*State_ReplicatedMap
	//	*State_Vote
	Value isState_Value `protobuf_oneof:"value"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{15}
}

func (m *State) GetValue() isState_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *State) GetCounter() *ReplicatedCounterValue {
	if x, ok := x.GetValue().(*State_Counter); ok {
		return x.Counter
	}
	return nil
}

func (x *State) GetReplicatedSet() *ReplicatedSetValue {
	if x, ok := x.GetValue().(*State_ReplicatedSet); ok {
		return x.ReplicatedSet
	}
	return nil
}

func (x *State) GetRegister() *ReplicatedRegisterValue {
	if x, ok := x.GetValue().(*State_Register); ok {
		return x.Register
	}
	return nil
}

func (x *State) GetReplicatedMap() *ReplicatedMapValue {
	if x, ok := x.GetValue().(*State_ReplicatedMap); ok {
		return x.ReplicatedMap
	}
	return nil
}

func (x *State) GetVote() *VoteValue {
	if x, ok := x.GetValue().(*State_Vote); ok {
		return x.Vote
	}
	return nil
}

type isState_Value interface {
	isState_Value()
}

type State_Counter struct {
	// GCounterValue was field 1
	Counter *ReplicatedCounterValue `protobuf:"bytes,2,opt,name=counter,proto3,oneof"`
}

type State_ReplicatedSet struct {
	// GSetValue was field 3
	ReplicatedSet *ReplicatedSetValue `protobuf:"bytes,4,opt,name=replicated_set,json=replicatedSet,proto3,oneof"`
}

type State_Register struct {
	Register *ReplicatedRegisterValue `protobuf:"bytes,5,opt,name=register,proto3,oneof"`
}

type State_ReplicatedMap struct {
	// FlagValue was field 6
	ReplicatedMap *ReplicatedMapValue `protobuf:"bytes,7,opt,name=replicated_map,json=replicatedMap,proto3,oneof"`
}

type State_Vote struct {
	Vote *VoteValue `protobuf:"bytes,8,opt,name=vote,proto3,oneof"`
}

func (*State_Counter) isState_Value() {}

func (*State_ReplicatedSet) isState_Value() {}

func (*State_Register) isState_Value() {}

func (*State_ReplicatedMap) isState_Value() {}

func (*State_Vote) isState_Value() {}

//
// The current state of a ReplicatedCounter Replicated Data.
//
type ReplicatedCounterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReplicatedCounterValue) Reset() {
	*x = ReplicatedCounterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedCounterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedCounterValue) ProtoMessage() {}

func (x *ReplicatedCounterValue) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedCounterValue.ProtoReflect.Descriptor instead.
func (*ReplicatedCounterValue) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{16}
}

func (x *ReplicatedCounterValue) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//
// The current state of an ReplicatedSet Replicated Data.
// Elements should be sorted, for testing of responses.
//
type ReplicatedSetValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []string `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *ReplicatedSetValue) Reset() {
	*x = ReplicatedSetValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedSetValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedSetValue) ProtoMessage() {}

func (x *ReplicatedSetValue) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedSetValue.ProtoReflect.Descriptor instead.
func (*ReplicatedSetValue) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{17}
}

func (x *ReplicatedSetValue) GetElements() []string {
	if x != nil {
		return x.Elements
	}
	return nil
}

//
// The current state of an ReplicatedRegister Replicated Data.
// Always a string in the TCK model tests.
//
type ReplicatedRegisterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReplicatedRegisterValue) Reset() {
	*x = ReplicatedRegisterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedRegisterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedRegisterValue) ProtoMessage() {}

func (x *ReplicatedRegisterValue) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedRegisterValue.ProtoReflect.Descriptor instead.
func (*ReplicatedRegisterValue) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{18}
}

func (x *ReplicatedRegisterValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//
// The current state of an ReplicatedMap Replicated Data.
// Entries should be sorted by key, for testing of responses.
//
type ReplicatedMapValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ReplicatedMapEntryValue `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *ReplicatedMapValue) Reset() {
	*x = ReplicatedMapValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedMapValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedMapValue) ProtoMessage() {}

func (x *ReplicatedMapValue) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedMapValue.ProtoReflect.Descriptor instead.
func (*ReplicatedMapValue) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{19}
}

func (x *ReplicatedMapValue) GetEntries() []*ReplicatedMapEntryValue {
	if x != nil {
		return x.Entries
	}
	return nil
}

//
// The current state of an ReplicatedMap entry.
//
type ReplicatedMapEntryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *State `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ReplicatedMapEntryValue) Reset() {
	*x = ReplicatedMapEntryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicatedMapEntryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicatedMapEntryValue) ProtoMessage() {}

func (x *ReplicatedMapEntryValue) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicatedMapEntryValue.ProtoReflect.Descriptor instead.
func (*ReplicatedMapEntryValue) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{20}
}

func (x *ReplicatedMapEntryValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReplicatedMapEntryValue) GetValue() *State {
	if x != nil {
		return x.Value
	}
	return nil
}

//
// The current state of a Vote Replicated Data.
//
type VoteValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfVote    bool  `protobuf:"varint,1,opt,name=self_vote,json=selfVote,proto3" json:"self_vote,omitempty"`
	VotesFor    int32 `protobuf:"varint,2,opt,name=votes_for,json=votesFor,proto3" json:"votes_for,omitempty"`
	TotalVoters int32 `protobuf:"varint,3,opt,name=total_voters,json=totalVoters,proto3" json:"total_voters,omitempty"`
}

func (x *VoteValue) Reset() {
	*x = VoteValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_replicatedentity_replicated_entity_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteValue) ProtoMessage() {}

func (x *VoteValue) ProtoReflect() protoreflect.Message {
	mi := &file_replicatedentity_replicated_entity_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteValue.ProtoReflect.Descriptor instead.
func (*VoteValue) Descriptor() ([]byte, []int) {
	return file_replicatedentity_replicated_entity_proto_rawDescGZIP(), []int{21}
}

func (x *VoteValue) GetSelfVote() bool {
	if x != nil {
		return x.SelfVote
	}
	return false
}

func (x *VoteValue) GetVotesFor() int32 {
	if x != nil {
		return x.VotesFor
	}
	return 0
}

func (x *VoteValue) GetTotalVoters() int32 {
	if x != nil {
		return x.TotalVoters
	}
	return 0
}

var File_replicatedentity_replicated_entity_proto protoreflect.FileDescriptor

var file_replicatedentity_replicated_entity_proto_rawDesc = []byte{
	0x0a, 0x28, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x61, 0x6b, 0x6b, 0x61,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x1a, 0x20, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x6c, 0x65, 0x73, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xc2, 0x43,
	0x02, 0x08, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6b, 0x6b,
	0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x48, 0x00, 0x52, 0x07,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x12, 0x4b,
	0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x03, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x5e, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x12, 0x67, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x12, 0x61, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x6b,
	0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x0e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x4b, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f,
	0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x31, 0x0a, 0x17,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x65, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0xae, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x65, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x61, 0x64, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x61, 0x64, 0x64,
	0x12, 0x5d, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x77, 0x0a, 0x18, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x6b, 0x6b, 0x61,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x56, 0x6f, 0x74, 0x65, 0x22,
	0x08, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x07, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x6f,
	0x75, 0x73, 0x22, 0x52, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74,
	0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xed, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x5d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x66, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x12, 0x60, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x6b, 0x6b, 0x61,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61,
	0x70, 0x12, 0x4a, 0x0a, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73,
	0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6f, 0x74, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2e, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x72, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x5c, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73,
	0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x73, 0x0a,
	0x17, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x6b, 0x6b, 0x61,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x68, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x2a, 0xe6, 0x01, 0x0a,
	0x1b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x32,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x01,
	0x12, 0x29, 0x0a, 0x25, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x52,
	0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x32, 0xbc, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x9f, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x32,
	0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e,
	0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22,
	0x20, 0x2f, 0x74, 0x63, 0x6b, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x01, 0x2a, 0x32, 0x86, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x77, 0x6f, 0x12, 0x6f, 0x0a, 0x04,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x32, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x8d, 0x01,
	0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x6f, 0x0a, 0x04,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x32, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x70, 0x0a,
	0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c,
	0x65, 0x73, 0x73, 0x2e, 0x74, 0x63, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5a, 0x50, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x62,
	0x65, 0x6e, 0x64, 0x2f, 0x61, 0x6b, 0x6b, 0x61, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6c, 0x65,
	0x73, 0x73, 0x2d, 0x67, 0x6f, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x63, 0x6b, 0x2f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3b, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_replicatedentity_replicated_entity_proto_rawDescOnce sync.Once
	file_replicatedentity_replicated_entity_proto_rawDescData = file_replicatedentity_replicated_entity_proto_rawDesc
)

func file_replicatedentity_replicated_entity_proto_rawDescGZIP() []byte {
	file_replicatedentity_replicated_entity_proto_rawDescOnce.Do(func() {
		file_replicatedentity_replicated_entity_proto_rawDescData = protoimpl.X.CompressGZIP(file_replicatedentity_replicated_entity_proto_rawDescData)
	})
	return file_replicatedentity_replicated_entity_proto_rawDescData
}

var file_replicatedentity_replicated_entity_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_replicatedentity_replicated_entity_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_replicatedentity_replicated_entity_proto_goTypes = []interface{}{
	(ReplicatedRegisterClockType)(0), // 0: akkaserverless.tck.model.replicatedentity.ReplicatedRegisterClockType
	(*Request)(nil),                  // 1: akkaserverless.tck.model.replicatedentity.Request
	(*RequestAction)(nil),            // 2: akkaserverless.tck.model.replicatedentity.RequestAction
	(*Update)(nil),                   // 3: akkaserverless.tck.model.replicatedentity.Update
	(*ReplicatedCounterUpdate)(nil),  // 4: akkaserverless.tck.model.replicatedentity.ReplicatedCounterUpdate
	(*ReplicatedSetUpdate)(nil),      // 5: akkaserverless.tck.model.replicatedentity.ReplicatedSetUpdate
	(*ReplicatedRegisterUpdate)(nil), // 6: akkaserverless.tck.model.replicatedentity.ReplicatedRegisterUpdate
	(*ReplicatedRegisterClock)(nil),  // 7: akkaserverless.tck.model.replicatedentity.ReplicatedRegisterClock
	(*ReplicatedMapUpdate)(nil),      // 8: akkaserverless.tck.model.replicatedentity.ReplicatedMapUpdate
	(*ReplicatedMapEntryUpdate)(nil), // 9: akkaserverless.tck.model.replicatedentity.ReplicatedMapEntryUpdate
	(*VoteUpdate)(nil),               // 10: akkaserverless.tck.model.replicatedentity.VoteUpdate
	(*Delete)(nil),                   // 11: akkaserverless.tck.model.replicatedentity.Delete
	(*Forward)(nil),                  // 12: akkaserverless.tck.model.replicatedentity.Forward
	(*Fail)(nil),                     // 13: akkaserverless.tck.model.replicatedentity.Fail
	(*Effect)(nil),                   // 14: akkaserverless.tck.model.replicatedentity.Effect
	(*Response)(nil),                 // 15: akkaserverless.tck.model.replicatedentity.Response
	(*State)(nil),                    // 16: akkaserverless.tck.model.replicatedentity.State
	(*ReplicatedCounterValue)(nil),   // 17: akkaserverless.tck.model.replicatedentity.ReplicatedCounterValue
	(*ReplicatedSetValue)(nil),       // 18: akkaserverless.tck.model.replicatedentity.ReplicatedSetValue
	(*ReplicatedRegisterValue)(nil),  // 19: akkaserverless.tck.model.replicatedentity.ReplicatedRegisterValue
	(*ReplicatedMapValue)(nil),       // 20: akkaserverless.tck.model.replicatedentity.ReplicatedMapValue
	(*ReplicatedMapEntryValue)(nil),  // 21: akkaserverless.tck.model.replicatedentity.ReplicatedMapEntryValue
	(*VoteValue)(nil),                // 22: akkaserverless.tck.model.replicatedentity.VoteValue
}
var file_replicatedentity_replicated_entity_proto_depIdxs = []int32{
	2,  // 0: akkaserverless.tck.model.replicatedentity.Request.actions:type_name -> akkaserverless.tck.model.replicatedentity.RequestAction
	3,  // 1: akkaserverless.tck.model.replicatedentity.RequestAction.update:type_name -> akkaserverless.tck.model.replicatedentity.Update
	11, // 2: akkaserverless.tck.model.replicatedentity.RequestAction.delete:type_name -> akkaserverless.tck.model.replicatedentity.Delete
	12, // 3: akkaserverless.tck.model.replicatedentity.RequestAction.forward:type_name -> akkaserverless.tck.model.replicatedentity.Forward
	13, // 4: akkaserverless.tck.model.replicatedentity.RequestAction.fail:type_name -> akkaserverless.tck.model.replicatedentity.Fail
	14, // 5: akkaserverless.tck.model.replicatedentity.RequestAction.effect:type_name -> akkaserverless.tck.model.replicatedentity.Effect
	4,  // 6: akkaserverless.tck.model.replicatedentity.Update.counter:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedCounterUpdate
	5,  // 7: akkaserverless.tck.model.replicatedentity.Update.replicated_set:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedSetUpdate
	6,  // 8: akkaserverless.tck.model.replicatedentity.Update.register:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedRegisterUpdate
	8,  // 9: akkaserverless.tck.model.replicatedentity.Update.replicated_map:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedMapUpdate
	10, // 10: akkaserverless.tck.model.replicatedentity.Update.vote:type_name -> akkaserverless.tck.model.replicatedentity.VoteUpdate
	7,  // 11: akkaserverless.tck.model.replicatedentity.ReplicatedRegisterUpdate.clock:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedRegisterClock
	0,  // 12: akkaserverless.tck.model.replicatedentity.ReplicatedRegisterClock.clock_type:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedRegisterClockType
	9,  // 13: akkaserverless.tck.model.replicatedentity.ReplicatedMapUpdate.update:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedMapEntryUpdate
	3,  // 14: akkaserverless.tck.model.replicatedentity.ReplicatedMapEntryUpdate.update:type_name -> akkaserverless.tck.model.replicatedentity.Update
	16, // 15: akkaserverless.tck.model.replicatedentity.Response.state:type_name -> akkaserverless.tck.model.replicatedentity.State
	17, // 16: akkaserverless.tck.model.replicatedentity.State.counter:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedCounterValue
	18, // 17: akkaserverless.tck.model.replicatedentity.State.replicated_set:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedSetValue
	19, // 18: akkaserverless.tck.model.replicatedentity.State.register:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedRegisterValue
	20, // 19: akkaserverless.tck.model.replicatedentity.State.replicated_map:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedMapValue
	22, // 20: akkaserverless.tck.model.replicatedentity.State.vote:type_name -> akkaserverless.tck.model.replicatedentity.VoteValue
	21, // 21: akkaserverless.tck.model.replicatedentity.ReplicatedMapValue.entries:type_name -> akkaserverless.tck.model.replicatedentity.ReplicatedMapEntryValue
	16, // 22: akkaserverless.tck.model.replicatedentity.ReplicatedMapEntryValue.value:type_name -> akkaserverless.tck.model.replicatedentity.State
	1,  // 23: akkaserverless.tck.model.replicatedentity.ReplicatedEntityTckModel.Process:input_type -> akkaserverless.tck.model.replicatedentity.Request
	1,  // 24: akkaserverless.tck.model.replicatedentity.ReplicatedEntityTwo.Call:input_type -> akkaserverless.tck.model.replicatedentity.Request
	1,  // 25: akkaserverless.tck.model.replicatedentity.ReplicatedEntityConfigured.Call:input_type -> akkaserverless.tck.model.replicatedentity.Request
	15, // 26: akkaserverless.tck.model.replicatedentity.ReplicatedEntityTckModel.Process:output_type -> akkaserverless.tck.model.replicatedentity.Response
	15, // 27: akkaserverless.tck.model.replicatedentity.ReplicatedEntityTwo.Call:output_type -> akkaserverless.tck.model.replicatedentity.Response
	15, // 28: akkaserverless.tck.model.replicatedentity.ReplicatedEntityConfigured.Call:output_type -> akkaserverless.tck.model.replicatedentity.Response
	26, // [26:29] is the sub-list for method output_type
	23, // [23:26] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_replicatedentity_replicated_entity_proto_init() }
func file_replicatedentity_replicated_entity_proto_init() {
	if File_replicatedentity_replicated_entity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_replicatedentity_replicated_entity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedCounterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedSetUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedRegisterUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedRegisterClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedMapUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedMapEntryUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Effect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedCounterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedSetValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedRegisterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedMapValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicatedMapEntryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_replicatedentity_replicated_entity_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_replicatedentity_replicated_entity_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RequestAction_Update)(nil),
		(*RequestAction_Delete)(nil),
		(*RequestAction_Forward)(nil),
		(*RequestAction_Fail)(nil),
		(*RequestAction_Effect)(nil),
	}
	file_replicatedentity_replicated_entity_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Update_Counter)(nil),
		(*Update_ReplicatedSet)(nil),
		(*Update_Register)(nil),
		(*Update_ReplicatedMap)(nil),
		(*Update_Vote)(nil),
	}
	file_replicatedentity_replicated_entity_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ReplicatedSetUpdate_Add)(nil),
		(*ReplicatedSetUpdate_Remove)(nil),
		(*ReplicatedSetUpdate_Clear)(nil),
	}
	file_replicatedentity_replicated_entity_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ReplicatedMapUpdate_Add)(nil),
		(*ReplicatedMapUpdate_Update)(nil),
		(*ReplicatedMapUpdate_Remove)(nil),
		(*ReplicatedMapUpdate_Clear)(nil),
	}
	file_replicatedentity_replicated_entity_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*State_Counter)(nil),
		(*State_ReplicatedSet)(nil),
		(*State_Register)(nil),
		(*State_ReplicatedMap)(nil),
		(*State_Vote)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_replicatedentity_replicated_entity_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_replicatedentity_replicated_entity_proto_goTypes,
		DependencyIndexes: file_replicatedentity_replicated_entity_proto_depIdxs,
		EnumInfos:         file_replicatedentity_replicated_entity_proto_enumTypes,
		MessageInfos:      file_replicatedentity_replicated_entity_proto_msgTypes,
	}.Build()
	File_replicatedentity_replicated_entity_proto = out.File
	file_replicatedentity_replicated_entity_proto_rawDesc = nil
	file_replicatedentity_replicated_entity_proto_goTypes = nil
	file_replicatedentity_replicated_entity_proto_depIdxs = nil
}
