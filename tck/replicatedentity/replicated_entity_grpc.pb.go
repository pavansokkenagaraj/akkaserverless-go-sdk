// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package replicatedentity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicatedEntityTckModelClient is the client API for ReplicatedEntityTckModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicatedEntityTckModelClient interface {
	Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type replicatedEntityTckModelClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicatedEntityTckModelClient(cc grpc.ClientConnInterface) ReplicatedEntityTckModelClient {
	return &replicatedEntityTckModelClient{cc}
}

func (c *replicatedEntityTckModelClient) Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/akkaserverless.tck.model.replicatedentity.ReplicatedEntityTckModel/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatedEntityTckModelServer is the server API for ReplicatedEntityTckModel service.
// All implementations must embed UnimplementedReplicatedEntityTckModelServer
// for forward compatibility
type ReplicatedEntityTckModelServer interface {
	Process(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedReplicatedEntityTckModelServer()
}

// UnimplementedReplicatedEntityTckModelServer must be embedded to have forward compatible implementations.
type UnimplementedReplicatedEntityTckModelServer struct {
}

func (UnimplementedReplicatedEntityTckModelServer) Process(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedReplicatedEntityTckModelServer) mustEmbedUnimplementedReplicatedEntityTckModelServer() {
}

// UnsafeReplicatedEntityTckModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicatedEntityTckModelServer will
// result in compilation errors.
type UnsafeReplicatedEntityTckModelServer interface {
	mustEmbedUnimplementedReplicatedEntityTckModelServer()
}

func RegisterReplicatedEntityTckModelServer(s grpc.ServiceRegistrar, srv ReplicatedEntityTckModelServer) {
	s.RegisterService(&ReplicatedEntityTckModel_ServiceDesc, srv)
}

func _ReplicatedEntityTckModel_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatedEntityTckModelServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akkaserverless.tck.model.replicatedentity.ReplicatedEntityTckModel/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatedEntityTckModelServer).Process(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicatedEntityTckModel_ServiceDesc is the grpc.ServiceDesc for ReplicatedEntityTckModel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicatedEntityTckModel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.tck.model.replicatedentity.ReplicatedEntityTckModel",
	HandlerType: (*ReplicatedEntityTckModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _ReplicatedEntityTckModel_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replicatedentity/replicated_entity.proto",
}

// ReplicatedEntityTwoClient is the client API for ReplicatedEntityTwo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicatedEntityTwoClient interface {
	Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type replicatedEntityTwoClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicatedEntityTwoClient(cc grpc.ClientConnInterface) ReplicatedEntityTwoClient {
	return &replicatedEntityTwoClient{cc}
}

func (c *replicatedEntityTwoClient) Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/akkaserverless.tck.model.replicatedentity.ReplicatedEntityTwo/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatedEntityTwoServer is the server API for ReplicatedEntityTwo service.
// All implementations must embed UnimplementedReplicatedEntityTwoServer
// for forward compatibility
type ReplicatedEntityTwoServer interface {
	Call(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedReplicatedEntityTwoServer()
}

// UnimplementedReplicatedEntityTwoServer must be embedded to have forward compatible implementations.
type UnimplementedReplicatedEntityTwoServer struct {
}

func (UnimplementedReplicatedEntityTwoServer) Call(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedReplicatedEntityTwoServer) mustEmbedUnimplementedReplicatedEntityTwoServer() {}

// UnsafeReplicatedEntityTwoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicatedEntityTwoServer will
// result in compilation errors.
type UnsafeReplicatedEntityTwoServer interface {
	mustEmbedUnimplementedReplicatedEntityTwoServer()
}

func RegisterReplicatedEntityTwoServer(s grpc.ServiceRegistrar, srv ReplicatedEntityTwoServer) {
	s.RegisterService(&ReplicatedEntityTwo_ServiceDesc, srv)
}

func _ReplicatedEntityTwo_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatedEntityTwoServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akkaserverless.tck.model.replicatedentity.ReplicatedEntityTwo/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatedEntityTwoServer).Call(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicatedEntityTwo_ServiceDesc is the grpc.ServiceDesc for ReplicatedEntityTwo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicatedEntityTwo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.tck.model.replicatedentity.ReplicatedEntityTwo",
	HandlerType: (*ReplicatedEntityTwoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _ReplicatedEntityTwo_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replicatedentity/replicated_entity.proto",
}

// ReplicatedEntityConfiguredClient is the client API for ReplicatedEntityConfigured service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicatedEntityConfiguredClient interface {
	Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type replicatedEntityConfiguredClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicatedEntityConfiguredClient(cc grpc.ClientConnInterface) ReplicatedEntityConfiguredClient {
	return &replicatedEntityConfiguredClient{cc}
}

func (c *replicatedEntityConfiguredClient) Call(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/akkaserverless.tck.model.replicatedentity.ReplicatedEntityConfigured/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicatedEntityConfiguredServer is the server API for ReplicatedEntityConfigured service.
// All implementations must embed UnimplementedReplicatedEntityConfiguredServer
// for forward compatibility
type ReplicatedEntityConfiguredServer interface {
	Call(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedReplicatedEntityConfiguredServer()
}

// UnimplementedReplicatedEntityConfiguredServer must be embedded to have forward compatible implementations.
type UnimplementedReplicatedEntityConfiguredServer struct {
}

func (UnimplementedReplicatedEntityConfiguredServer) Call(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedReplicatedEntityConfiguredServer) mustEmbedUnimplementedReplicatedEntityConfiguredServer() {
}

// UnsafeReplicatedEntityConfiguredServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicatedEntityConfiguredServer will
// result in compilation errors.
type UnsafeReplicatedEntityConfiguredServer interface {
	mustEmbedUnimplementedReplicatedEntityConfiguredServer()
}

func RegisterReplicatedEntityConfiguredServer(s grpc.ServiceRegistrar, srv ReplicatedEntityConfiguredServer) {
	s.RegisterService(&ReplicatedEntityConfigured_ServiceDesc, srv)
}

func _ReplicatedEntityConfigured_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicatedEntityConfiguredServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akkaserverless.tck.model.replicatedentity.ReplicatedEntityConfigured/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicatedEntityConfiguredServer).Call(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ReplicatedEntityConfigured_ServiceDesc is the grpc.ServiceDesc for ReplicatedEntityConfigured service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicatedEntityConfigured_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.tck.model.replicatedentity.ReplicatedEntityConfigured",
	HandlerType: (*ReplicatedEntityConfiguredServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _ReplicatedEntityConfigured_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "replicatedentity/replicated_entity.proto",
}
