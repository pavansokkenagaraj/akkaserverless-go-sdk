// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package view

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ViewTckModelClient is the client API for ViewTckModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewTckModelClient interface {
	ProcessUpdateUnary(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ViewState, error)
}

type viewTckModelClient struct {
	cc grpc.ClientConnInterface
}

func NewViewTckModelClient(cc grpc.ClientConnInterface) ViewTckModelClient {
	return &viewTckModelClient{cc}
}

func (c *viewTckModelClient) ProcessUpdateUnary(ctx context.Context, in *Event, opts ...grpc.CallOption) (*ViewState, error) {
	out := new(ViewState)
	err := c.cc.Invoke(ctx, "/akkaserverless.tck.model.view.ViewTckModel/ProcessUpdateUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewTckModelServer is the server API for ViewTckModel service.
// All implementations must embed UnimplementedViewTckModelServer
// for forward compatibility
type ViewTckModelServer interface {
	ProcessUpdateUnary(context.Context, *Event) (*ViewState, error)
	mustEmbedUnimplementedViewTckModelServer()
}

// UnimplementedViewTckModelServer must be embedded to have forward compatible implementations.
type UnimplementedViewTckModelServer struct {
}

func (UnimplementedViewTckModelServer) ProcessUpdateUnary(context.Context, *Event) (*ViewState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessUpdateUnary not implemented")
}
func (UnimplementedViewTckModelServer) mustEmbedUnimplementedViewTckModelServer() {}

// UnsafeViewTckModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewTckModelServer will
// result in compilation errors.
type UnsafeViewTckModelServer interface {
	mustEmbedUnimplementedViewTckModelServer()
}

func RegisterViewTckModelServer(s grpc.ServiceRegistrar, srv ViewTckModelServer) {
	s.RegisterService(&ViewTckModel_ServiceDesc, srv)
}

func _ViewTckModel_ProcessUpdateUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewTckModelServer).ProcessUpdateUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akkaserverless.tck.model.view.ViewTckModel/ProcessUpdateUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewTckModelServer).ProcessUpdateUnary(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// ViewTckModel_ServiceDesc is the grpc.ServiceDesc for ViewTckModel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViewTckModel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.tck.model.view.ViewTckModel",
	HandlerType: (*ViewTckModelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessUpdateUnary",
			Handler:    _ViewTckModel_ProcessUpdateUnary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "view/view.proto",
}

// ViewTckSourceClient is the client API for ViewTckSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewTckSourceClient interface {
}

type viewTckSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewViewTckSourceClient(cc grpc.ClientConnInterface) ViewTckSourceClient {
	return &viewTckSourceClient{cc}
}

// ViewTckSourceServer is the server API for ViewTckSource service.
// All implementations must embed UnimplementedViewTckSourceServer
// for forward compatibility
type ViewTckSourceServer interface {
	mustEmbedUnimplementedViewTckSourceServer()
}

// UnimplementedViewTckSourceServer must be embedded to have forward compatible implementations.
type UnimplementedViewTckSourceServer struct {
}

func (UnimplementedViewTckSourceServer) mustEmbedUnimplementedViewTckSourceServer() {}

// UnsafeViewTckSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewTckSourceServer will
// result in compilation errors.
type UnsafeViewTckSourceServer interface {
	mustEmbedUnimplementedViewTckSourceServer()
}

func RegisterViewTckSourceServer(s grpc.ServiceRegistrar, srv ViewTckSourceServer) {
	s.RegisterService(&ViewTckSource_ServiceDesc, srv)
}

// ViewTckSource_ServiceDesc is the grpc.ServiceDesc for ViewTckSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViewTckSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.tck.model.view.ViewTckSource",
	HandlerType: (*ViewTckSourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "view/view.proto",
}
