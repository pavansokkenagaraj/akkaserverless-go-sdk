// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscoveryClient is the client API for Discovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscoveryClient interface {
	// Discover what components the user function wishes to serve.
	Discover(ctx context.Context, in *ProxyInfo, opts ...grpc.CallOption) (*Spec, error)
	// Report an error back to the user function. This will only be invoked to
	// tell the user function that it has done something wrong, eg, violated the
	// protocol, tried to use a component type that isn't supported, or attempted
	// to forward to a component that doesn't exist, etc. These messages should be
	// logged clearly for debugging purposes.
	ReportError(ctx context.Context, in *UserFunctionError, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// When the Akka Serverless proxy is shutting down it sends this signal at the end
	// of the shutdown process. The user function container should preferably delay
	// its own shutdown until the proxy has terminated to be able to drain requests in
	// flight from the proxy.
	ProxyTerminated(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Health check for the user function to detect if it stops, crashes or becomes unresponsive
	// and the proxy needs to restart it. The SDK should respond in a timely fashion if healthy
	// or fail the request if not.
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type discoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryClient(cc grpc.ClientConnInterface) DiscoveryClient {
	return &discoveryClient{cc}
}

func (c *discoveryClient) Discover(ctx context.Context, in *ProxyInfo, opts ...grpc.CallOption) (*Spec, error) {
	out := new(Spec)
	err := c.cc.Invoke(ctx, "/akkaserverless.protocol.Discovery/Discover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) ReportError(ctx context.Context, in *UserFunctionError, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/akkaserverless.protocol.Discovery/ReportError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) ProxyTerminated(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/akkaserverless.protocol.Discovery/ProxyTerminated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discoveryClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/akkaserverless.protocol.Discovery/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscoveryServer is the server API for Discovery service.
// All implementations must embed UnimplementedDiscoveryServer
// for forward compatibility
type DiscoveryServer interface {
	// Discover what components the user function wishes to serve.
	Discover(context.Context, *ProxyInfo) (*Spec, error)
	// Report an error back to the user function. This will only be invoked to
	// tell the user function that it has done something wrong, eg, violated the
	// protocol, tried to use a component type that isn't supported, or attempted
	// to forward to a component that doesn't exist, etc. These messages should be
	// logged clearly for debugging purposes.
	ReportError(context.Context, *UserFunctionError) (*emptypb.Empty, error)
	// When the Akka Serverless proxy is shutting down it sends this signal at the end
	// of the shutdown process. The user function container should preferably delay
	// its own shutdown until the proxy has terminated to be able to drain requests in
	// flight from the proxy.
	ProxyTerminated(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Health check for the user function to detect if it stops, crashes or becomes unresponsive
	// and the proxy needs to restart it. The SDK should respond in a timely fashion if healthy
	// or fail the request if not.
	HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedDiscoveryServer()
}

// UnimplementedDiscoveryServer must be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServer struct {
}

func (UnimplementedDiscoveryServer) Discover(context.Context, *ProxyInfo) (*Spec, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedDiscoveryServer) ReportError(context.Context, *UserFunctionError) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportError not implemented")
}
func (UnimplementedDiscoveryServer) ProxyTerminated(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyTerminated not implemented")
}
func (UnimplementedDiscoveryServer) HealthCheck(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDiscoveryServer) mustEmbedUnimplementedDiscoveryServer() {}

// UnsafeDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscoveryServer will
// result in compilation errors.
type UnsafeDiscoveryServer interface {
	mustEmbedUnimplementedDiscoveryServer()
}

func RegisterDiscoveryServer(s grpc.ServiceRegistrar, srv DiscoveryServer) {
	s.RegisterService(&Discovery_ServiceDesc, srv)
}

func _Discovery_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akkaserverless.protocol.Discovery/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).Discover(ctx, req.(*ProxyInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_ReportError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFunctionError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).ReportError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akkaserverless.protocol.Discovery/ReportError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).ReportError(ctx, req.(*UserFunctionError))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_ProxyTerminated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).ProxyTerminated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akkaserverless.protocol.Discovery/ProxyTerminated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).ProxyTerminated(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Discovery_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscoveryServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akkaserverless.protocol.Discovery/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscoveryServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Discovery_ServiceDesc is the grpc.ServiceDesc for Discovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.protocol.Discovery",
	HandlerType: (*DiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Discover",
			Handler:    _Discovery_Discover_Handler,
		},
		{
			MethodName: "ReportError",
			Handler:    _Discovery_ReportError_Handler,
		},
		{
			MethodName: "ProxyTerminated",
			Handler:    _Discovery_ProxyTerminated_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Discovery_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovery.proto",
}
