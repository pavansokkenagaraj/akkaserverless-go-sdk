// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplicatedEntitiesClient is the client API for ReplicatedEntities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicatedEntitiesClient interface {
	// After invoking handle, the first message sent will always be a
	// ReplicatedEntityInit message, containing the entity ID, and, if it exists or
	// is available, a delta for the initial state of the entity. After that, one or
	// more commands may be sent, as well as deltas as they arrive.
	//
	// The user function must respond with one reply per command in. They do not
	// necessarily have to be sent in the same order that the commands were sent,
	// the command ID is used to correlate commands to replies.
	Handle(ctx context.Context, opts ...grpc.CallOption) (ReplicatedEntities_HandleClient, error)
}

type replicatedEntitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicatedEntitiesClient(cc grpc.ClientConnInterface) ReplicatedEntitiesClient {
	return &replicatedEntitiesClient{cc}
}

func (c *replicatedEntitiesClient) Handle(ctx context.Context, opts ...grpc.CallOption) (ReplicatedEntities_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicatedEntities_ServiceDesc.Streams[0], "/akkaserverless.component.replicatedentity.ReplicatedEntities/Handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicatedEntitiesHandleClient{stream}
	return x, nil
}

type ReplicatedEntities_HandleClient interface {
	Send(*ReplicatedEntityStreamIn) error
	Recv() (*ReplicatedEntityStreamOut, error)
	grpc.ClientStream
}

type replicatedEntitiesHandleClient struct {
	grpc.ClientStream
}

func (x *replicatedEntitiesHandleClient) Send(m *ReplicatedEntityStreamIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicatedEntitiesHandleClient) Recv() (*ReplicatedEntityStreamOut, error) {
	m := new(ReplicatedEntityStreamOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplicatedEntitiesServer is the server API for ReplicatedEntities service.
// All implementations must embed UnimplementedReplicatedEntitiesServer
// for forward compatibility
type ReplicatedEntitiesServer interface {
	// After invoking handle, the first message sent will always be a
	// ReplicatedEntityInit message, containing the entity ID, and, if it exists or
	// is available, a delta for the initial state of the entity. After that, one or
	// more commands may be sent, as well as deltas as they arrive.
	//
	// The user function must respond with one reply per command in. They do not
	// necessarily have to be sent in the same order that the commands were sent,
	// the command ID is used to correlate commands to replies.
	Handle(ReplicatedEntities_HandleServer) error
	mustEmbedUnimplementedReplicatedEntitiesServer()
}

// UnimplementedReplicatedEntitiesServer must be embedded to have forward compatible implementations.
type UnimplementedReplicatedEntitiesServer struct {
}

func (UnimplementedReplicatedEntitiesServer) Handle(ReplicatedEntities_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedReplicatedEntitiesServer) mustEmbedUnimplementedReplicatedEntitiesServer() {}

// UnsafeReplicatedEntitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicatedEntitiesServer will
// result in compilation errors.
type UnsafeReplicatedEntitiesServer interface {
	mustEmbedUnimplementedReplicatedEntitiesServer()
}

func RegisterReplicatedEntitiesServer(s grpc.ServiceRegistrar, srv ReplicatedEntitiesServer) {
	s.RegisterService(&ReplicatedEntities_ServiceDesc, srv)
}

func _ReplicatedEntities_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicatedEntitiesServer).Handle(&replicatedEntitiesHandleServer{stream})
}

type ReplicatedEntities_HandleServer interface {
	Send(*ReplicatedEntityStreamOut) error
	Recv() (*ReplicatedEntityStreamIn, error)
	grpc.ServerStream
}

type replicatedEntitiesHandleServer struct {
	grpc.ServerStream
}

func (x *replicatedEntitiesHandleServer) Send(m *ReplicatedEntityStreamOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicatedEntitiesHandleServer) Recv() (*ReplicatedEntityStreamIn, error) {
	m := new(ReplicatedEntityStreamIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplicatedEntities_ServiceDesc is the grpc.ServiceDesc for ReplicatedEntities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicatedEntities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.component.replicatedentity.ReplicatedEntities",
	HandlerType: (*ReplicatedEntitiesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _ReplicatedEntities_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "replicated_entity.proto",
}
