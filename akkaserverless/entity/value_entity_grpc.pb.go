// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValueEntitiesClient is the client API for ValueEntities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValueEntitiesClient interface {
	// One stream will be established per active entity. Once established, the
	// first message sent will be Init, which contains the entity ID, and, a state
	// if the entity has previously persisted one. Once the Init message is sent,
	// one to many commands are sent to the entity. Each request coming in leads
	// to a new command being sent to the entity. The entity is expected to reply
	// to each command with exactly one reply message. The entity should process
	// commands and reply to commands in the order they came in. When processing a
	// command the entity can read and persist (update or delete) the state.
	Handle(ctx context.Context, opts ...grpc.CallOption) (ValueEntities_HandleClient, error)
}

type valueEntitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewValueEntitiesClient(cc grpc.ClientConnInterface) ValueEntitiesClient {
	return &valueEntitiesClient{cc}
}

func (c *valueEntitiesClient) Handle(ctx context.Context, opts ...grpc.CallOption) (ValueEntities_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &ValueEntities_ServiceDesc.Streams[0], "/akkaserverless.component.valueentity.ValueEntities/Handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &valueEntitiesHandleClient{stream}
	return x, nil
}

type ValueEntities_HandleClient interface {
	Send(*ValueEntityStreamIn) error
	Recv() (*ValueEntityStreamOut, error)
	grpc.ClientStream
}

type valueEntitiesHandleClient struct {
	grpc.ClientStream
}

func (x *valueEntitiesHandleClient) Send(m *ValueEntityStreamIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *valueEntitiesHandleClient) Recv() (*ValueEntityStreamOut, error) {
	m := new(ValueEntityStreamOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValueEntitiesServer is the server API for ValueEntities service.
// All implementations must embed UnimplementedValueEntitiesServer
// for forward compatibility
type ValueEntitiesServer interface {
	// One stream will be established per active entity. Once established, the
	// first message sent will be Init, which contains the entity ID, and, a state
	// if the entity has previously persisted one. Once the Init message is sent,
	// one to many commands are sent to the entity. Each request coming in leads
	// to a new command being sent to the entity. The entity is expected to reply
	// to each command with exactly one reply message. The entity should process
	// commands and reply to commands in the order they came in. When processing a
	// command the entity can read and persist (update or delete) the state.
	Handle(ValueEntities_HandleServer) error
	mustEmbedUnimplementedValueEntitiesServer()
}

// UnimplementedValueEntitiesServer must be embedded to have forward compatible implementations.
type UnimplementedValueEntitiesServer struct {
}

func (UnimplementedValueEntitiesServer) Handle(ValueEntities_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedValueEntitiesServer) mustEmbedUnimplementedValueEntitiesServer() {}

// UnsafeValueEntitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValueEntitiesServer will
// result in compilation errors.
type UnsafeValueEntitiesServer interface {
	mustEmbedUnimplementedValueEntitiesServer()
}

func RegisterValueEntitiesServer(s grpc.ServiceRegistrar, srv ValueEntitiesServer) {
	s.RegisterService(&ValueEntities_ServiceDesc, srv)
}

func _ValueEntities_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ValueEntitiesServer).Handle(&valueEntitiesHandleServer{stream})
}

type ValueEntities_HandleServer interface {
	Send(*ValueEntityStreamOut) error
	Recv() (*ValueEntityStreamIn, error)
	grpc.ServerStream
}

type valueEntitiesHandleServer struct {
	grpc.ServerStream
}

func (x *valueEntitiesHandleServer) Send(m *ValueEntityStreamOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *valueEntitiesHandleServer) Recv() (*ValueEntityStreamIn, error) {
	m := new(ValueEntityStreamIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ValueEntities_ServiceDesc is the grpc.ServiceDesc for ValueEntities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValueEntities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.component.valueentity.ValueEntities",
	HandlerType: (*ValueEntitiesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _ValueEntities_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "value_entity.proto",
}
