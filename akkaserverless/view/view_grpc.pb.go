// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package view

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ViewsClient is the client API for Views service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewsClient interface {
	Handle(ctx context.Context, opts ...grpc.CallOption) (Views_HandleClient, error)
}

type viewsClient struct {
	cc grpc.ClientConnInterface
}

func NewViewsClient(cc grpc.ClientConnInterface) ViewsClient {
	return &viewsClient{cc}
}

func (c *viewsClient) Handle(ctx context.Context, opts ...grpc.CallOption) (Views_HandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Views_ServiceDesc.Streams[0], "/akkaserverless.component.view.Views/Handle", opts...)
	if err != nil {
		return nil, err
	}
	x := &viewsHandleClient{stream}
	return x, nil
}

type Views_HandleClient interface {
	Send(*ViewStreamIn) error
	Recv() (*ViewStreamOut, error)
	grpc.ClientStream
}

type viewsHandleClient struct {
	grpc.ClientStream
}

func (x *viewsHandleClient) Send(m *ViewStreamIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *viewsHandleClient) Recv() (*ViewStreamOut, error) {
	m := new(ViewStreamOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ViewsServer is the server API for Views service.
// All implementations must embed UnimplementedViewsServer
// for forward compatibility
type ViewsServer interface {
	Handle(Views_HandleServer) error
	mustEmbedUnimplementedViewsServer()
}

// UnimplementedViewsServer must be embedded to have forward compatible implementations.
type UnimplementedViewsServer struct {
}

func (UnimplementedViewsServer) Handle(Views_HandleServer) error {
	return status.Errorf(codes.Unimplemented, "method Handle not implemented")
}
func (UnimplementedViewsServer) mustEmbedUnimplementedViewsServer() {}

// UnsafeViewsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewsServer will
// result in compilation errors.
type UnsafeViewsServer interface {
	mustEmbedUnimplementedViewsServer()
}

func RegisterViewsServer(s grpc.ServiceRegistrar, srv ViewsServer) {
	s.RegisterService(&Views_ServiceDesc, srv)
}

func _Views_Handle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ViewsServer).Handle(&viewsHandleServer{stream})
}

type Views_HandleServer interface {
	Send(*ViewStreamOut) error
	Recv() (*ViewStreamIn, error)
	grpc.ServerStream
}

type viewsHandleServer struct {
	grpc.ServerStream
}

func (x *viewsHandleServer) Send(m *ViewStreamOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *viewsHandleServer) Recv() (*ViewStreamIn, error) {
	m := new(ViewStreamIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Views_ServiceDesc is the grpc.ServiceDesc for Views service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Views_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.component.view.Views",
	HandlerType: (*ViewsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Handle",
			Handler:       _Views_Handle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "view.proto",
}
