// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package action

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActionsClient is the client API for Actions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionsClient interface {
	// Handle a unary command.
	//
	// The input command will contain the service name, command name, request
	// metadata and the command payload. The reply may contain a direct reply, a
	// forward or a failure, and it may contain many side effects.
	HandleUnary(ctx context.Context, in *ActionCommand, opts ...grpc.CallOption) (*ActionResponse, error)
	// Handle a streamed in command.
	//
	// The first message in will contain the request metadata, including the
	// service name and command name. It will not have an associated payload set.
	// This will be followed by zero to many messages in with a payload, but no
	// service name or command name set.
	//
	// If the underlying transport supports per stream metadata, rather than per
	// message metadata, then that metadata will only be included in the metadata
	// of the first message. In contrast, if the underlying transport supports per
	// message metadata, there will be no metadata on the first message, the
	// metadata will instead be found on each subsequent message.
	//
	// The semantics of stream closure in this protocol map 1:1 with the semantics
	// of gRPC stream closure, that is, when the client closes the stream, the
	// stream is considered half closed, and the server should eventually, but not
	// necessarily immediately, send a response message with a status code and
	// trailers.
	//
	// If however the server sends a response message before the client closes the
	// stream, the stream is completely closed, and the client should handle this
	// and stop sending more messages.
	//
	// Either the client or the server may cancel the stream at any time,
	// cancellation is indicated through an HTTP2 stream RST message.
	HandleStreamedIn(ctx context.Context, opts ...grpc.CallOption) (Actions_HandleStreamedInClient, error)
	// Handle a streamed out command.
	//
	// The input command will contain the service name, command name, request
	// metadata and the command payload. Zero or more replies may be sent, each
	// containing either a direct reply, a forward or a failure, and each may
	// contain many side effects. The stream to the client will be closed when the
	// this stream is closed, with the same status as this stream is closed with.
	//
	// Either the client or the server may cancel the stream at any time,
	// cancellation is indicated through an HTTP2 stream RST message.
	HandleStreamedOut(ctx context.Context, in *ActionCommand, opts ...grpc.CallOption) (Actions_HandleStreamedOutClient, error)
	// Handle a full duplex streamed command.
	//
	// The first message in will contain the request metadata, including the
	// service name and command name. It will not have an associated payload set.
	// This will be followed by zero to many messages in with a payload, but no
	// service name or command name set.
	//
	// Zero or more replies may be sent, each containing either a direct reply, a
	// forward or a failure, and each may contain many side effects.
	//
	// If the underlying transport supports per stream metadata, rather than per
	// message metadata, then that metadata will only be included in the metadata
	// of the first message. In contrast, if the underlying transport supports per
	// message metadata, there will be no metadata on the first message, the
	// metadata will instead be found on each subsequent message.
	//
	// The semantics of stream closure in this protocol map 1:1 with the semantics
	// of gRPC stream closure, that is, when the client closes the stream, the
	// stream is considered half closed, and the server should eventually, but not
	// necessarily immediately, close the stream with a status code and trailers.
	//
	// If however the server closes the stream with a status code and trailers,
	// the stream is immediately considered completely closed, and no further
	// messages sent by the client will be handled by the server.
	//
	// Either the client or the server may cancel the stream at any time,
	// cancellation is indicated through an HTTP2 stream RST message.
	HandleStreamed(ctx context.Context, opts ...grpc.CallOption) (Actions_HandleStreamedClient, error)
}

type actionsClient struct {
	cc grpc.ClientConnInterface
}

func NewActionsClient(cc grpc.ClientConnInterface) ActionsClient {
	return &actionsClient{cc}
}

func (c *actionsClient) HandleUnary(ctx context.Context, in *ActionCommand, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/akkaserverless.component.action.Actions/HandleUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) HandleStreamedIn(ctx context.Context, opts ...grpc.CallOption) (Actions_HandleStreamedInClient, error) {
	stream, err := c.cc.NewStream(ctx, &Actions_ServiceDesc.Streams[0], "/akkaserverless.component.action.Actions/HandleStreamedIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionsHandleStreamedInClient{stream}
	return x, nil
}

type Actions_HandleStreamedInClient interface {
	Send(*ActionCommand) error
	CloseAndRecv() (*ActionResponse, error)
	grpc.ClientStream
}

type actionsHandleStreamedInClient struct {
	grpc.ClientStream
}

func (x *actionsHandleStreamedInClient) Send(m *ActionCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *actionsHandleStreamedInClient) CloseAndRecv() (*ActionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ActionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionsClient) HandleStreamedOut(ctx context.Context, in *ActionCommand, opts ...grpc.CallOption) (Actions_HandleStreamedOutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Actions_ServiceDesc.Streams[1], "/akkaserverless.component.action.Actions/HandleStreamedOut", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionsHandleStreamedOutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Actions_HandleStreamedOutClient interface {
	Recv() (*ActionResponse, error)
	grpc.ClientStream
}

type actionsHandleStreamedOutClient struct {
	grpc.ClientStream
}

func (x *actionsHandleStreamedOutClient) Recv() (*ActionResponse, error) {
	m := new(ActionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *actionsClient) HandleStreamed(ctx context.Context, opts ...grpc.CallOption) (Actions_HandleStreamedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Actions_ServiceDesc.Streams[2], "/akkaserverless.component.action.Actions/HandleStreamed", opts...)
	if err != nil {
		return nil, err
	}
	x := &actionsHandleStreamedClient{stream}
	return x, nil
}

type Actions_HandleStreamedClient interface {
	Send(*ActionCommand) error
	Recv() (*ActionResponse, error)
	grpc.ClientStream
}

type actionsHandleStreamedClient struct {
	grpc.ClientStream
}

func (x *actionsHandleStreamedClient) Send(m *ActionCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *actionsHandleStreamedClient) Recv() (*ActionResponse, error) {
	m := new(ActionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActionsServer is the server API for Actions service.
// All implementations must embed UnimplementedActionsServer
// for forward compatibility
type ActionsServer interface {
	// Handle a unary command.
	//
	// The input command will contain the service name, command name, request
	// metadata and the command payload. The reply may contain a direct reply, a
	// forward or a failure, and it may contain many side effects.
	HandleUnary(context.Context, *ActionCommand) (*ActionResponse, error)
	// Handle a streamed in command.
	//
	// The first message in will contain the request metadata, including the
	// service name and command name. It will not have an associated payload set.
	// This will be followed by zero to many messages in with a payload, but no
	// service name or command name set.
	//
	// If the underlying transport supports per stream metadata, rather than per
	// message metadata, then that metadata will only be included in the metadata
	// of the first message. In contrast, if the underlying transport supports per
	// message metadata, there will be no metadata on the first message, the
	// metadata will instead be found on each subsequent message.
	//
	// The semantics of stream closure in this protocol map 1:1 with the semantics
	// of gRPC stream closure, that is, when the client closes the stream, the
	// stream is considered half closed, and the server should eventually, but not
	// necessarily immediately, send a response message with a status code and
	// trailers.
	//
	// If however the server sends a response message before the client closes the
	// stream, the stream is completely closed, and the client should handle this
	// and stop sending more messages.
	//
	// Either the client or the server may cancel the stream at any time,
	// cancellation is indicated through an HTTP2 stream RST message.
	HandleStreamedIn(Actions_HandleStreamedInServer) error
	// Handle a streamed out command.
	//
	// The input command will contain the service name, command name, request
	// metadata and the command payload. Zero or more replies may be sent, each
	// containing either a direct reply, a forward or a failure, and each may
	// contain many side effects. The stream to the client will be closed when the
	// this stream is closed, with the same status as this stream is closed with.
	//
	// Either the client or the server may cancel the stream at any time,
	// cancellation is indicated through an HTTP2 stream RST message.
	HandleStreamedOut(*ActionCommand, Actions_HandleStreamedOutServer) error
	// Handle a full duplex streamed command.
	//
	// The first message in will contain the request metadata, including the
	// service name and command name. It will not have an associated payload set.
	// This will be followed by zero to many messages in with a payload, but no
	// service name or command name set.
	//
	// Zero or more replies may be sent, each containing either a direct reply, a
	// forward or a failure, and each may contain many side effects.
	//
	// If the underlying transport supports per stream metadata, rather than per
	// message metadata, then that metadata will only be included in the metadata
	// of the first message. In contrast, if the underlying transport supports per
	// message metadata, there will be no metadata on the first message, the
	// metadata will instead be found on each subsequent message.
	//
	// The semantics of stream closure in this protocol map 1:1 with the semantics
	// of gRPC stream closure, that is, when the client closes the stream, the
	// stream is considered half closed, and the server should eventually, but not
	// necessarily immediately, close the stream with a status code and trailers.
	//
	// If however the server closes the stream with a status code and trailers,
	// the stream is immediately considered completely closed, and no further
	// messages sent by the client will be handled by the server.
	//
	// Either the client or the server may cancel the stream at any time,
	// cancellation is indicated through an HTTP2 stream RST message.
	HandleStreamed(Actions_HandleStreamedServer) error
	mustEmbedUnimplementedActionsServer()
}

// UnimplementedActionsServer must be embedded to have forward compatible implementations.
type UnimplementedActionsServer struct {
}

func (UnimplementedActionsServer) HandleUnary(context.Context, *ActionCommand) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUnary not implemented")
}
func (UnimplementedActionsServer) HandleStreamedIn(Actions_HandleStreamedInServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleStreamedIn not implemented")
}
func (UnimplementedActionsServer) HandleStreamedOut(*ActionCommand, Actions_HandleStreamedOutServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleStreamedOut not implemented")
}
func (UnimplementedActionsServer) HandleStreamed(Actions_HandleStreamedServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleStreamed not implemented")
}
func (UnimplementedActionsServer) mustEmbedUnimplementedActionsServer() {}

// UnsafeActionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionsServer will
// result in compilation errors.
type UnsafeActionsServer interface {
	mustEmbedUnimplementedActionsServer()
}

func RegisterActionsServer(s grpc.ServiceRegistrar, srv ActionsServer) {
	s.RegisterService(&Actions_ServiceDesc, srv)
}

func _Actions_HandleUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).HandleUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akkaserverless.component.action.Actions/HandleUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).HandleUnary(ctx, req.(*ActionCommand))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_HandleStreamedIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ActionsServer).HandleStreamedIn(&actionsHandleStreamedInServer{stream})
}

type Actions_HandleStreamedInServer interface {
	SendAndClose(*ActionResponse) error
	Recv() (*ActionCommand, error)
	grpc.ServerStream
}

type actionsHandleStreamedInServer struct {
	grpc.ServerStream
}

func (x *actionsHandleStreamedInServer) SendAndClose(m *ActionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *actionsHandleStreamedInServer) Recv() (*ActionCommand, error) {
	m := new(ActionCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Actions_HandleStreamedOut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionCommand)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActionsServer).HandleStreamedOut(m, &actionsHandleStreamedOutServer{stream})
}

type Actions_HandleStreamedOutServer interface {
	Send(*ActionResponse) error
	grpc.ServerStream
}

type actionsHandleStreamedOutServer struct {
	grpc.ServerStream
}

func (x *actionsHandleStreamedOutServer) Send(m *ActionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Actions_HandleStreamed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ActionsServer).HandleStreamed(&actionsHandleStreamedServer{stream})
}

type Actions_HandleStreamedServer interface {
	Send(*ActionResponse) error
	Recv() (*ActionCommand, error)
	grpc.ServerStream
}

type actionsHandleStreamedServer struct {
	grpc.ServerStream
}

func (x *actionsHandleStreamedServer) Send(m *ActionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *actionsHandleStreamedServer) Recv() (*ActionCommand, error) {
	m := new(ActionCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Actions_ServiceDesc is the grpc.ServiceDesc for Actions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Actions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akkaserverless.component.action.Actions",
	HandlerType: (*ActionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleUnary",
			Handler:    _Actions_HandleUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandleStreamedIn",
			Handler:       _Actions_HandleStreamedIn_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HandleStreamedOut",
			Handler:       _Actions_HandleStreamedOut_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HandleStreamed",
			Handler:       _Actions_HandleStreamed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "action.proto",
}
